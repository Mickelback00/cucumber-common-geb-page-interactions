/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 the original author or authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

buildscript {
	repositories {
		mavenCentral()
		maven { url 'http://repo.springsource.org/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
		classpath 'com.github.samueltbrown:gradle-cucumber-plugin:0.7'
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'propdeps'


	group = 'io.jdev.geb'
	version = '0.2'

	ext {
		groovyVersion = "1.8.6"
		if(!project.hasProperty('gebVersion')) {
			gebVersion = '0.9.3'
		}
		seleniumVersion = "2.41.0"
		spockVersion = "0.7-groovy-1.8"
		cucumberJvmVersion = "1.1.8"
        cucumberVariablesVersion = '0.5'

		isSnapshot = version.endsWith("-SNAPSHOT")
	}

    repositories {
        mavenCentral()
        if(isSnapshot) {
            // allow reading snapshot deps
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        }
    }

    test {
		testLogging.exceptionFormat = 'full'
	}

}

// IDE support
apply from: "$project.rootDir/gradle/ide.gradle"

// just sign / publish this module
apply plugin: 'maven'
apply plugin: 'signing'
apply from: "$project.rootDir/gradle/pom.gradle"


dependencies {
	provided "org.codehaus.groovy:groovy:$groovyVersion"
	provided "org.gebish:geb-core:$gebVersion"
	provided "info.cukes:cucumber-core:$cucumberJvmVersion"
	provided "info.cukes:cucumber-groovy:$cucumberJvmVersion"
    provided "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    provided "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
	compile "io.jdev.cucumber:cucumber-variables:$cucumberVariablesVersion"



	testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude module:'groovy-all'
    }

	testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

allprojects {
    task resolveAllDependencies {
        doLast {
            configurations.all { it.resolve() }
        }
    }
}

signing {
	sign configurations.archives
	required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
}

javadoc {
	title = "Geb Cucumber API $version"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

uploadArchives { task ->
	repositories.mavenDeployer {
		if(!isSnapshot) {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
		}
		uniqueVersion = false
		gradle.taskGraph.whenReady { taskGraph ->
			if (taskGraph.hasTask(task)) {
				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
				}
				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
				}
			}
		}
	}
}

task uploadSnapshots << {
	if(!isSnapshot) {
		println "Not uploading snapshot as not a snapshot version"
	}
}
if(isSnapshot) {
	uploadSnapshots.dependsOn(uploadArchives)
}

